1、模型I/O组件
1.1、模型包装器：通过接口调用大语言模型 
  1.1.1、LLM模型包装器 （字符串） BaseLLM 2023年7月之前。
  1.1.2、ChatLLM模型包装器 (消息输入、消息输出) BaseChatModel
1.2、提示词模板管理：输入 Model I
1.3、输出解析器：Model O

序列化是指将消息对象转换为可以存储或传输的数据模式过程。

1.4、提示词模版：（明确的指令、少量的示例、用户输入）
1.4.1、PromptTemplate实例化过程，就是构造提示词。

template=("""xxx{v1}xx""")
input_variables=["","",""]
The_PT=PromptTemplate(input_variables,template)

prompt=The_PT.format(v1="",v1="",v3="")  #format_prompt

最主要的外部数据有 用户的输入、用户和模型的历史聊天记录、外部知识数据、程序上下文管理信息。

实例化内置模板对象
from_template
from_message

在实例化模板对象后将外部用户输入格式化并传入对象内。
format
format_prompt

to_string
to_message

1.4.2、FewShotPromptTemplate
 示例选择器
  LengthBasedExampleSelector 基于长度
  MaxMarginalRelevanceExampleSelector 最大边际相关性
  NGramOverlapExampleSelector 基于n-gram重叠度
  SemanticSimilarityExampleSelector 基于相似度
1.4.3、多功能提示词模板
 Partial提示词模板
 PipelinePrompt组合模板功能
 序列化模板

1.5输出解析器 （结构化数据）
1.5.1、功能：添加提示词模板的输出指令和解析输出格式。
BooleanOutputParser
CommaSeparatedListOutputParser 以逗号分隔的列表类型的输出
DatetimeOutputParser 
EnumOutputParser
ListOutputParser
PydanticOutputParser
StructuredOutputParser

两个方法：
 get_format_instructions()
 parse()


1.5.2、Padantic Json输出解析器
from pydantic import BaseModel,Field,validator
class Joke(BaseModel):
  setup: str=Field(description="question to set up a joke")
  punchline: str=Field(description="answer to resolve the joke")
  #使用Pydantic添加自定义的验证逻辑
  def question_ends_with_question_mask(cls,field):
    if field[-1]!="?":
      raise ValueError("Badly formed question!")
    return field

parser=PydanticOutputParser(pydantic_object=Joke)




1.5.3、StructuredOutputParser
response_schemas=[
  ResponseSchema(
    name="answer",
    description="answer to the user's quesion"
  ),
  ResponseSchema(
    name="source",
    description=(
      "source used to answer the user's question,"
      "should be a website."
    )
  )
]
output_parser=StructuredOutputParser.from_response_schemas(response_schemas)
format_instructions=output_parser.get_format_instructions()

2、数据增加（RAG）
LEDVR 工作流
L Loader 
E Text Embedding Model
D Document Transformers 对文档进行切割、组合、过滤。 将加载的文档转换为可被嵌入模型包装器操作的文档数据格式。
  RecursiveCharacterTextSplitter 文本切割器
V VectorStore  最相似
R Retriever

文档数据 向量数据

加载器
1、txt
  TextLoader
2、csv
  CSVLoader
3、文件目录
  DirectoryLoader
4、HTML
  BSHTMLLoader
5、JSON (jq)
  JSONLoader
6、Markdown
  UnstructuredMarkdownLoader
7、PDF
  MathpixPDFLoader
  UnstructuredPDFLoader
  OnlinePDFLoader
  PyPDFium2Loader
  PDFMinerLoader
  PyMuPDFLoader

  

三大模型包装器（Embeddings、LLM、Chat Model）
Embeddings 嵌入方法 
embed_documents 
embed_query













